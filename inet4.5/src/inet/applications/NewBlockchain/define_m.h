//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/applications/NewBlockchain/define.msg.
//

#ifndef __INET_DEFINE_M_H
#define __INET_DEFINE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class VehicleRA;
class ASAT;
class TGT;
class VehicleAT;
class VehicleAU;
class CHAIN;
class TGSAT;
class STPacket;
class VehicleToServerAU;
class ServerToVehicleAU;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:7</tt> by opp_msgtool.
 * <pre>
 * class VehicleRA extends FieldsChunk
 * {
 *     int VehId;
 *     int rsuId;
 *     string userIp;
 *     int requestedLifetime;
 * }
 * </pre>
 */
class INET_API VehicleRA : public ::inet::FieldsChunk
{
  protected:
    int VehId = 0;
    int rsuId = 0;
    ::omnetpp::opp_string userIp;
    int requestedLifetime = 0;

  private:
    void copy(const VehicleRA& other);

  protected:
    bool operator==(const VehicleRA&) = delete;

  public:
    VehicleRA();
    VehicleRA(const VehicleRA& other);
    virtual ~VehicleRA();
    VehicleRA& operator=(const VehicleRA& other);
    virtual VehicleRA *dup() const override {return new VehicleRA(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVehId() const;
    virtual void setVehId(int VehId);

    virtual int getRsuId() const;
    virtual void setRsuId(int rsuId);

    virtual const char * getUserIp() const;
    virtual void setUserIp(const char * userIp);

    virtual int getRequestedLifetime() const;
    virtual void setRequestedLifetime(int requestedLifetime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleRA& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleRA& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:15</tt> by opp_msgtool.
 * <pre>
 * class ASAT extends FieldsChunk
 * {
 *     string AT;
 *     string secret;
 *     int vehId;
 * }
 * </pre>
 */
class INET_API ASAT : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AT;
    ::omnetpp::opp_string secret;
    int vehId = 0;

  private:
    void copy(const ASAT& other);

  protected:
    bool operator==(const ASAT&) = delete;

  public:
    ASAT();
    ASAT(const ASAT& other);
    virtual ~ASAT();
    ASAT& operator=(const ASAT& other);
    virtual ASAT *dup() const override {return new ASAT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAT() const;
    virtual void setAT(const char * AT);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);

    virtual int getVehId() const;
    virtual void setVehId(int vehId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ASAT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ASAT& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:22</tt> by opp_msgtool.
 * <pre>
 * class TGT extends FieldsChunk
 * {
 *     string tGT;
 *     string secret;
 * }
 * </pre>
 */
class INET_API TGT : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string tGT;
    ::omnetpp::opp_string secret;

  private:
    void copy(const TGT& other);

  protected:
    bool operator==(const TGT&) = delete;

  public:
    TGT();
    TGT(const TGT& other);
    virtual ~TGT();
    TGT& operator=(const TGT& other);
    virtual TGT *dup() const override {return new TGT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getTGT() const;
    virtual void setTGT(const char * tGT);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TGT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TGT& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:28</tt> by opp_msgtool.
 * <pre>
 * class VehicleAT extends FieldsChunk
 * {
 *     int serviceName;
 *     int LTReqTGT;
 * }
 * </pre>
 */
class INET_API VehicleAT : public ::inet::FieldsChunk
{
  protected:
    int serviceName = 0;
    int LTReqTGT = 0;

  private:
    void copy(const VehicleAT& other);

  protected:
    bool operator==(const VehicleAT&) = delete;

  public:
    VehicleAT();
    VehicleAT(const VehicleAT& other);
    virtual ~VehicleAT();
    VehicleAT& operator=(const VehicleAT& other);
    virtual VehicleAT *dup() const override {return new VehicleAT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getServiceName() const;
    virtual void setServiceName(int serviceName);

    virtual int getLTReqTGT() const;
    virtual void setLTReqTGT(int LTReqTGT);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleAT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleAT& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:34</tt> by opp_msgtool.
 * <pre>
 * class VehicleAU extends FieldsChunk
 * {
 *     string AU;
 *     string secret;
 * }
 * </pre>
 */
class INET_API VehicleAU : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AU;
    ::omnetpp::opp_string secret;

  private:
    void copy(const VehicleAU& other);

  protected:
    bool operator==(const VehicleAU&) = delete;

  public:
    VehicleAU();
    VehicleAU(const VehicleAU& other);
    virtual ~VehicleAU();
    VehicleAU& operator=(const VehicleAU& other);
    virtual VehicleAU *dup() const override {return new VehicleAU(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAU() const;
    virtual void setAU(const char * AU);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleAU& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleAU& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:40</tt> by opp_msgtool.
 * <pre>
 * class CHAIN extends FieldsChunk
 * {
 *     string AU;
 *     string vehId;
 *     string destId;
 * }
 * </pre>
 */
class INET_API CHAIN : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AU;
    ::omnetpp::opp_string vehId;
    ::omnetpp::opp_string destId;

  private:
    void copy(const CHAIN& other);

  protected:
    bool operator==(const CHAIN&) = delete;

  public:
    CHAIN();
    CHAIN(const CHAIN& other);
    virtual ~CHAIN();
    CHAIN& operator=(const CHAIN& other);
    virtual CHAIN *dup() const override {return new CHAIN(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAU() const;
    virtual void setAU(const char * AU);

    virtual const char * getVehId() const;
    virtual void setVehId(const char * vehId);

    virtual const char * getDestId() const;
    virtual void setDestId(const char * destId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CHAIN& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CHAIN& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:47</tt> by opp_msgtool.
 * <pre>
 * class TGSAT extends FieldsChunk
 * {
 *     string AT;
 *     string secret;
 * }
 * </pre>
 */
class INET_API TGSAT : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AT;
    ::omnetpp::opp_string secret;

  private:
    void copy(const TGSAT& other);

  protected:
    bool operator==(const TGSAT&) = delete;

  public:
    TGSAT();
    TGSAT(const TGSAT& other);
    virtual ~TGSAT();
    TGSAT& operator=(const TGSAT& other);
    virtual TGSAT *dup() const override {return new TGSAT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAT() const;
    virtual void setAT(const char * AT);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TGSAT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TGSAT& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:53</tt> by opp_msgtool.
 * <pre>
 * class STPacket extends FieldsChunk
 * {
 *     string sT;
 *     string secret;
 * }
 * </pre>
 */
class INET_API STPacket : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string sT;
    ::omnetpp::opp_string secret;

  private:
    void copy(const STPacket& other);

  protected:
    bool operator==(const STPacket&) = delete;

  public:
    STPacket();
    STPacket(const STPacket& other);
    virtual ~STPacket();
    STPacket& operator=(const STPacket& other);
    virtual STPacket *dup() const override {return new STPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getST() const;
    virtual void setST(const char * sT);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const STPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, STPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:59</tt> by opp_msgtool.
 * <pre>
 * class VehicleToServerAU extends FieldsChunk
 * {
 *     string AU;
 *     string secret;
 * }
 * </pre>
 */
class INET_API VehicleToServerAU : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AU;
    ::omnetpp::opp_string secret;

  private:
    void copy(const VehicleToServerAU& other);

  protected:
    bool operator==(const VehicleToServerAU&) = delete;

  public:
    VehicleToServerAU();
    VehicleToServerAU(const VehicleToServerAU& other);
    virtual ~VehicleToServerAU();
    VehicleToServerAU& operator=(const VehicleToServerAU& other);
    virtual VehicleToServerAU *dup() const override {return new VehicleToServerAU(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAU() const;
    virtual void setAU(const char * AU);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VehicleToServerAU& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VehicleToServerAU& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/NewBlockchain/define.msg:65</tt> by opp_msgtool.
 * <pre>
 * class ServerToVehicleAU extends FieldsChunk
 * {
 *     string AU;
 *     string secret;
 *     int rsuId;
 * }
 * </pre>
 */
class INET_API ServerToVehicleAU : public ::inet::FieldsChunk
{
  protected:
    ::omnetpp::opp_string AU;
    ::omnetpp::opp_string secret;
    int rsuId = 0;

  private:
    void copy(const ServerToVehicleAU& other);

  protected:
    bool operator==(const ServerToVehicleAU&) = delete;

  public:
    ServerToVehicleAU();
    ServerToVehicleAU(const ServerToVehicleAU& other);
    virtual ~ServerToVehicleAU();
    ServerToVehicleAU& operator=(const ServerToVehicleAU& other);
    virtual ServerToVehicleAU *dup() const override {return new ServerToVehicleAU(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAU() const;
    virtual void setAU(const char * AU);

    virtual const char * getSecret() const;
    virtual void setSecret(const char * secret);

    virtual int getRsuId() const;
    virtual void setRsuId(int rsuId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServerToVehicleAU& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServerToVehicleAU& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::VehicleRA *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::VehicleRA*>(ptr.get<cObject>()); }
template<> inline inet::ASAT *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ASAT*>(ptr.get<cObject>()); }
template<> inline inet::TGT *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::TGT*>(ptr.get<cObject>()); }
template<> inline inet::VehicleAT *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::VehicleAT*>(ptr.get<cObject>()); }
template<> inline inet::VehicleAU *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::VehicleAU*>(ptr.get<cObject>()); }
template<> inline inet::CHAIN *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::CHAIN*>(ptr.get<cObject>()); }
template<> inline inet::TGSAT *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::TGSAT*>(ptr.get<cObject>()); }
template<> inline inet::STPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::STPacket*>(ptr.get<cObject>()); }
template<> inline inet::VehicleToServerAU *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::VehicleToServerAU*>(ptr.get<cObject>()); }
template<> inline inet::ServerToVehicleAU *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ServerToVehicleAU*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_DEFINE_M_H

